// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (from_account_id, to_account_id, amount) VALUES ($1, $2, $3) RETURNING id, from_account_id, to_account_id, amount, created_at, updated_at
`

type CreateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListsTransfers = `-- name: GetListsTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at, updated_at FROM transfers WHERE from_account_id = $1 OR to_account_id = $1 ORDER BY id LIMIT $2 OFFSET $3
`

type GetListsTransfersParams struct {
	FromAccountID int64 `json:"from_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetListsTransfers(ctx context.Context, arg GetListsTransfersParams) ([]Transfers, error) {
	rows, err := q.db.QueryContext(ctx, getListsTransfers, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfers{}
	for rows.Next() {
		var i Transfers
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalPageListsTransfers = `-- name: GetTotalPageListsTransfers :one
SELECT COUNT(*) FROM transfers
`

func (q *Queries) GetTotalPageListsTransfers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalPageListsTransfers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalPageListsTransfersSpesific = `-- name: GetTotalPageListsTransfersSpesific :one
SELECT COUNT(*) FROM transfers WHERE from_account_id = $1 OR to_account_id = $1
`

func (q *Queries) GetTotalPageListsTransfersSpesific(ctx context.Context, fromAccountID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalPageListsTransfersSpesific, fromAccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTransferByFromAccountId = `-- name: GetTransferByFromAccountId :one
SELECT id, from_account_id, to_account_id, amount, created_at, updated_at FROM transfers WHERE from_account_id = $1 LIMIT 1
`

func (q *Queries) GetTransferByFromAccountId(ctx context.Context, fromAccountID int64) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, getTransferByFromAccountId, fromAccountID)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransferById = `-- name: GetTransferById :one
SELECT id, from_account_id, to_account_id, amount, created_at, updated_at FROM transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransferById(ctx context.Context, id int64) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, getTransferById, id)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransferByToAccountId = `-- name: GetTransferByToAccountId :one
SELECT id, from_account_id, to_account_id, amount, created_at, updated_at FROM transfers WHERE to_account_id = $1 LIMIT 1
`

func (q *Queries) GetTransferByToAccountId(ctx context.Context, toAccountID int64) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, getTransferByToAccountId, toAccountID)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listsTransfers = `-- name: ListsTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at, updated_at FROM transfers ORDER BY id LIMIT $1 OFFSET $2
`

type ListsTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListsTransfers(ctx context.Context, arg ListsTransfersParams) ([]Transfers, error) {
	rows, err := q.db.QueryContext(ctx, listsTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfers{}
	for rows.Next() {
		var i Transfers
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
